// --- File: TodoApp.Core/Entities/TodoTask.cs ---
// Defines the core domain entity for a task.
namespace TodoList.Core.Entities
{
    /// <summary>
    /// Represents a single task in the To-Do list.
    /// This is the core domain entity.
    /// </summary>
    public class TodoTask
    {
        /// <summary>
        /// Unique identifier for the task.
        /// Typically generated by the repository upon addition.
        /// </summary>
        public int Id { get; set; }

        /// <summary>
        /// The description or content of the task. Cannot be empty or whitespace.
        /// </summary>
        private string _description = string.Empty;
        public string Description
        {
            get => _description;
            set
            {
                if (string.IsNullOrWhiteSpace(value))
                    throw new ArgumentException("Description cannot be empty or whitespace.", nameof(Description));
                _description = value;
            }
        }

        /// <summary>
        /// Indicates whether the task has been completed.
        /// </summary>
        public bool IsCompleted { get; set; }

        /// <summary>
        /// The date and time when the task was created (UTC).
        /// </summary>
        public DateTime CreatedDate { get; set; }

        /// <summary>
        /// Optional due date for the task (UTC).
        /// </summary>
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// Priority level of the task (e.g., 0 = Normal, 1 = High, -1 = Low).
        /// </summary>
        public int Priority { get; set; } // Example: 0 = Normal, 1 = High

        /// <summary>
        /// Constructor to create a new task with a description.
        /// Enforces that the description is not null or whitespace.
        /// </summary>
        /// <param name="description">The task description.</param>
        /// <exception cref="ArgumentException">Thrown if description is null or whitespace.</exception>
        public TodoTask(string description)
        {
            // Use property setter for validation
            Description = description;
            IsCompleted = false; // New tasks are initially not completed.
            CreatedDate = DateTime.UtcNow;
            Priority = 0; // Default priority
        }

        /// <summary>
        /// Parameterless constructor.
        /// Required by some frameworks (like ORMs or serializers).
        /// Use with caution; ensure properties are set appropriately afterwards if used directly.
        /// Initializes Description to a valid state temporarily if needed by framework.
        /// </summary>
        public TodoTask()
        {
             // Initialize required fields to valid defaults if necessary for frameworks
             _description = "Temporary Description - Please Update"; // Ensure valid state
             CreatedDate = DateTime.UtcNow;
        }
    }
}